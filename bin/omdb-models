#!/usr/bin/env php
<?php

/**
 * Usage:
 *   1) ./omdb-models <targetDir> [Project\\Namespace]
 *
 * If the Project\\Namespace argument is omitted, the script will look up the local
 * composer.json (in your current working directory) to find a matching PSR-4 autoload
 * entry. If found, it uses that as the base namespace; otherwise, it fails and requests
 * a manual namespace.
 */

// --- CLI Arguments ---
if ($argc < 2 || $argc > 3) {
    echo "Usage: omdb-models <targetDir> [Project\\\\Namespace]\n";
    exit(1);
}

$targetDir = rtrim($argv[1], '/');
$baseNamespace = $argc === 3 ? trim($argv[2], '\\') : null;

// --- Source directory ---
$srcDir = realpath(__DIR__ . '/../src');
if (!$srcDir) {
    echo "Could not find 'src' directory.\n";
    exit(1);
}

// --- If no base namespace was provided, parse from the local composer.json ---
if ($baseNamespace === null) {
    // We assume you're running this script from your project's root directory.
    // That is, the same place where composer.json is located.
    $projectRoot = getcwd();
    $composerFile = $projectRoot . '/composer.json';

    if (!is_file($composerFile)) {
        echo "No composer.json found in the current working directory.\n";
        echo "Please specify the namespace manually.\n";
        exit(1);
    }

    $composerData = json_decode(file_get_contents($composerFile), true);
    if (!isset($composerData['autoload']['psr-4'])) {
        echo "No PSR-4 autoload section found in composer.json.\n";
        echo "Please specify the namespace manually.\n";
        exit(1);
    }

    $psr4Map = $composerData['autoload']['psr-4'];
    $matchedNamespace = null;

    // Attempt to find a PSR-4 entry whose path matches $targetDir
    foreach ($psr4Map as $ns => $path) {
        // remove trailing slash from the path
        $path = rtrim($path, '/');
        if ($path === $targetDir) {
            $matchedNamespace = rtrim($ns, '\\');
            break;
        }
    }

    if (!$matchedNamespace) {
        echo "Could not find a PSR-4 mapping in composer.json matching '{$targetDir}'.\n";
        echo "Please specify the namespace manually.\n";
        exit(1);
    }

    $baseNamespace = $matchedNamespace;
    echo "No namespace provided; using '{$baseNamespace}' from composer.json.\n";
}


/**
 * Recursively copies files from $src to $dst, updates namespaces based on
 * folder structure, and rewrites "use Zerotoprod\OmdbModels\..." to
 * point to your new namespace instead.
 *
 * @param string $src        Source path
 * @param string $dst        Destination path
 * @param string $baseNS     The root/base namespace
 * @param string $relativeNS Sub-namespace from subfolders
 */
function copy_files(string $src, string $dst, string $baseNS, string $relativeNS = ''): void
{
    $fullNamespace = trim($baseNS . '\\' . $relativeNS, '\\');

    if (!is_dir($dst)) {
        if (!mkdir($dst, 0777, true) && !is_dir($dst)) {
            throw new RuntimeException(sprintf('Directory "%s" was not created', $dst));
        }
    }

    $handle = opendir($src);
    if (!$handle) {
        throw new RuntimeException(sprintf('Directory "%s" could not be opened', $src));
    }

    while (($file = readdir($handle)) !== false) {
        if ($file === '.' || $file === '..') {
            continue;
        }

        $srcFile = $src . '/' . $file;
        $dstFile = $dst . '/' . $file;

        if (is_dir($srcFile)) {
            copy_files(
                $srcFile,
                $dstFile,
                $baseNS,
                trim($relativeNS . '\\' . $file, '\\')
            );
        } else {
            copy($srcFile, $dstFile);

            $content = file_get_contents($dstFile);
            if ($content === false) {
                throw new RuntimeException(sprintf('Could not read file "%s"', $dstFile));
            }

            // 1) Replace the namespace line
            $content = preg_replace(
                '/^namespace\s+.*;/m',
                'namespace ' . $fullNamespace . ';',
                $content
            );

            // 2) Rewrite use statements from "use Zerotoprod\OmdbModels\..."
            //    to "use {baseNS}\..."
            $content = preg_replace(
                '/^use\s+Zerotoprod\\\\OmdbModels\\\\(.+);/m',
                'use ' . $baseNS . '\\\\$1;',
                $content
            );

            file_put_contents($dstFile, $content);
            echo "Copied file: $dstFile with namespace: $fullNamespace\n";
        }
    }

    closedir($handle);
}

copy_files($srcDir, $targetDir, $baseNamespace);

echo "DONE\n";